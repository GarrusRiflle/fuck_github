# -*- coding: utf-8 -*-
from django.shortcuts import render_to_response, render, redirect
from django.template.loader import get_template
from django.http.response import HttpResponse, Http404, HttpResponseRedirect
from django.template import Context
from django.core.exceptions import ObjectDoesNotExist
from django.core.context_processors import csrf
from django.contrib import auth
from django.contrib.auth.models import User
from author.models import Author

def register(request):
	args={}
	args.update(csrf(request))
	if request.POST:
		username = request.POST.get('username', '')
		email 	 = request.POST.get('email', '')
		nickname = request.POST.get('nickname', '')
		password = request.POST.get('password', '')
		password1= request.POST.get('password1', '')
		if password != password1:
			args['login_error'] = "Пароли не совпадают"
			return render_to_response('forms/register.html', args)
		if password is None:
			args['login_error'] = "Пароль обязателен"
			return render_to_response('forms/register.html', args)
		if User.objects.get(username=username):
			args['login_error'] = "Логин уже занят"
			return render_to_response('forms/register.html', args)
		user = User.objects.create_user(username, email, password)
		user.save()
		author = Author(user=user, nickname=nickname, avatar='static/empty.png')
		author.save()
		return redirect('/auth/login/')			
	else:
		return render_to_response('forms/register.html', args)

def login(request):
	args={}	
	args.update(csrf(request))
	if request.POST:
		username = request.POST.get('username', '')
		password = request.POST.get('password', '')
		user = auth.authenticate(username=username, password=password)
		if user is not None:
			auth.login(request, user)
			return HttpResponseRedirect(request.META.get('HTTP_REFERER','/'))
		else:
			args['login_error'] = "Пользователь не найден"	
			return render_to_response('forms/login.html', args)
	else:
		return render_to_response('forms/login.html', args)

def logout(request):
	auth.logout(request)
	return HttpResponseRedirect(request.META.get('HTTP_REFERER','/'))
